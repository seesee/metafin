// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Library {
  id            String   @id @default(cuid())
  jellyfinId    String   @unique
  name          String
  type          String
  locations     String // JSON array of location paths
  refreshProgress Float? // 0.0 to 1.0
  lastSyncAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  items Item[]

  @@map("libraries")
}

model Item {
  id              String    @id @default(cuid())
  jellyfinId      String    @unique
  name            String
  type            String // Series, Season, Episode, Movie, Collection
  overview        String?
  parentId        String?
  libraryId       String
  path            String?
  pathHash        String? // Hash of the path for heuristics
  dateCreated     DateTime
  dateModified    DateTime?
  year            Int?
  premiereDate    DateTime?
  endDate         DateTime?
  runTimeTicks    BigInt? // Jellyfin's 100ns ticks
  runtimeMins     Int? // Derived runtime in minutes
  indexNumber     Int? // Episode/season number
  parentIndexNumber Int? // Season number for episodes
  providerIds     String   @default("{}") // JSON object
  genres          String   @default("[]") // JSON array
  tags            String   @default("[]") // JSON array
  studios         String   @default("[]") // JSON array
  hasArtwork      Boolean  @default(false)
  imageBlurHashes String? // JSON object of artwork blur hashes
  suspectedMisclassification Boolean @default(false)
  misclassificationScore Float?
  misclassificationReasons String? // JSON array of reasons
  lastSyncAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  library     Library        @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  parent      Item?          @relation("ItemHierarchy", fields: [parentId], references: [id])
  children    Item[]         @relation("ItemHierarchy")
  artwork     ArtworkCandidate[]
  people      PersonInfo[]
  collections CollectionItem[]
  operationLogs OperationLog[]

  @@index([libraryId])
  @@index([type])
  @@index([parentId])
  @@index([dateCreated])
  @@index([suspectedMisclassification])
  @@map("items")
}


model ArtworkCandidate {
  id         String  @id @default(cuid())
  itemId     String
  type       String // Primary, Backdrop, Thumb, Logo, Banner
  url        String
  width      Int?
  height     Int?
  language   String?
  source     String // provider name
  confidence Float   @default(0.0)
  isApplied  Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId, type])
  @@index([source])
  @@map("artwork_candidates")
}

model PersonInfo {
  id     String @id @default(cuid())
  itemId String
  name   String
  role   String?
  type   String // Actor, Director, Writer, etc.
  personId String? // External person ID if available
  createdAt DateTime @default(now())

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@map("person_info")
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("manual") // manual, smart
  rules       String?  // JSON for smart collections
  sortBy      String?
  sortOrder   String?  @default("asc") // asc, desc
  itemLimit   Int?
  jellyfinId  String?  // Corresponding Jellyfin collection ID
  lastBuiltAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items CollectionItem[]

  @@map("collections")
}

model CollectionItem {
  id           String @id @default(cuid())
  collectionId String
  itemId       String
  sortIndex    Int?
  createdAt    DateTime @default(now())

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  item       Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([collectionId, itemId])
  @@map("collection_items")
}

model Job {
  id             String   @id @default(cuid())
  type           String   // sync, bulk-operation, etc.
  status         String   // pending, running, completed, failed, cancelled
  progress       Float    @default(0.0) // 0.0 to 1.0
  startTime      DateTime?
  endTime        DateTime?
  errorMessage   String?
  itemsTotal     Int      @default(0)
  itemsProcessed Int      @default(0)
  itemsFailed    Int      @default(0)
  metadata       String?  // JSON with job-specific data
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  operationLogs OperationLog[]

  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("jobs")
}

model OperationLog {
  id        String   @id @default(cuid())
  jobId     String?
  itemId    String?
  operation String   // update-metadata, set-provider-id, upload-artwork, etc.
  beforeJson String? // JSON snapshot before change
  afterJson  String? // JSON snapshot after change
  success   Boolean
  errorMessage String?
  requestId String?
  createdAt DateTime @default(now())

  job  Job?  @relation(fields: [jobId], references: [id], onDelete: SetNull)
  item Item? @relation(fields: [itemId], references: [id], onDelete: SetNull)

  @@index([jobId])
  @@index([itemId])
  @@index([operation])
  @@index([createdAt])
  @@map("operation_logs")
}

model ProviderCache {
  id        String   @id @default(cuid())
  provider  String
  cacheKey  String   // Unique key for this cache entry
  data      String   // JSON cached data
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([provider, cacheKey])
  @@index([expiresAt])
  @@map("provider_cache")
}